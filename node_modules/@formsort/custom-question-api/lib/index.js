"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDisableBackNavigation = exports.setAnswerValue = exports.clearAnswerValue = exports.getResponderUuid = exports.getAllAnswerValues = exports.getSemanticAnswerValue = exports.getAnswerValue = exports.setQuestionSize = exports.setAutoHeight = void 0;
const tslib_1 = require("tslib");
// import from directory for tree shaking
const custom_question_message_1 = tslib_1.__importDefault(require("@formsort/constants/lib/custom-question-message"));
const utils_1 = require("./utils");
let bodyResizeObserver;
const setAutoHeight = (enabled) => {
    if (enabled) {
        if (!bodyResizeObserver) {
            bodyResizeObserver = new ResizeObserver(onBodyHeightChanged);
        }
        bodyResizeObserver.observe(document.body);
    }
    else {
        if (bodyResizeObserver) {
            bodyResizeObserver.disconnect();
            bodyResizeObserver = undefined;
        }
    }
};
exports.setAutoHeight = setAutoHeight;
const onBodyHeightChanged = (entries) => {
    for (const entry of entries) {
        if (entry.target === document.body) {
            const { offsetHeight: height } = document.documentElement;
            sendResizeMessage(undefined /* width */, `${height}px`);
        }
    }
};
const setQuestionSize = (width, height) => {
    if (bodyResizeObserver) {
        throw new Error('autoHeight is enabled. To manually size size, call setAutoHeight(false) first.');
    }
    sendResizeMessage(width, height);
};
exports.setQuestionSize = setQuestionSize;
const sendResizeMessage = (width, height) => {
    (0, utils_1.sendMessageToWindowParent)(custom_question_message_1.default.SET_QUESTION_SIZE_MSG, {
        width,
        height,
    });
};
const getAnswerValue = () => (0, utils_1.getValueFromWindowParent)(custom_question_message_1.default.REQUEST_ANSWER_VALUE_MSG, custom_question_message_1.default.SET_ANSWER_VALUE_MSG);
exports.getAnswerValue = getAnswerValue;
const getSemanticAnswerValue = (semanticType) => (0, utils_1.getValueFromWindowParent)(custom_question_message_1.default.REQUEST_SEMANTIC_ANSWER_VALUE_MSG, custom_question_message_1.default.SET_SEMANTIC_ANSWER_VALUE_MSG, semanticType);
exports.getSemanticAnswerValue = getSemanticAnswerValue;
const getAllAnswerValues = () => (0, utils_1.getValueFromWindowParent)(custom_question_message_1.default.REQUEST_ANSWERS_MSG, custom_question_message_1.default.SET_ANSWERS_MSG);
exports.getAllAnswerValues = getAllAnswerValues;
const getResponderUuid = () => (0, utils_1.getValueFromWindowParent)(custom_question_message_1.default.REQUEST_RESPONDER_UUID_MSG, custom_question_message_1.default.SET_RESPONDER_UUID_MSG);
exports.getResponderUuid = getResponderUuid;
const clearAnswerValue = () => {
    (0, utils_1.sendMessageToWindowParent)(custom_question_message_1.default.CLEAR_ANSWER_VALUE_MSG);
};
exports.clearAnswerValue = clearAnswerValue;
const setAnswerValue = (value) => {
    (0, utils_1.sendMessageToWindowParent)(custom_question_message_1.default.SET_ANSWER_VALUE_MSG, value);
};
exports.setAnswerValue = setAnswerValue;
const setDisableBackNavigation = (disable, options) => {
    (0, utils_1.sendMessageToWindowParent)(custom_question_message_1.default.SET_DISABLE_BACK_NAVIGATION_MSG, {
        disable,
        beforeUnloadMessage: options === null || options === void 0 ? void 0 : options.beforeUnloadMessage,
    });
};
exports.setDisableBackNavigation = setDisableBackNavigation;
